package persistence;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Profesor Value Object.
  * This class is value object representing database table docentes
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Profesor implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int doc_id;
    private String doc_nombre;
    private String doc_password;
    private Timestamp timestamp;
    private String doc_apellidos;
    private String doc_cod;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Profesor () {

    }

    public Profesor (int doc_idIn) {

          this.doc_id = doc_idIn;

    }

    public Profesor(String doc_cod) {
        this.doc_cod = doc_cod;
    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getDoc_id() {
          return this.doc_id;
    }
    public void setDoc_id(int doc_idIn) {
          this.doc_id = doc_idIn;
    }

    public String getDoc_nombre() {
          return this.doc_nombre;
    }
    public void setDoc_nombre(String doc_nombreIn) {
          this.doc_nombre = doc_nombreIn;
    }

    public String getDoc_password() {
          return this.doc_password;
    }
    public void setDoc_password(String doc_passwordIn) {
          this.doc_password = doc_passwordIn;
    }

    public Timestamp getTimestamp() {
          return this.timestamp;
    }
    public void setTimestamp(Timestamp timestampIn) {
          this.timestamp = timestampIn;
    }

    public String getDoc_apellidos() {
          return this.doc_apellidos;
    }
    public void setDoc_apellidos(String doc_apellidosIn) {
          this.doc_apellidos = doc_apellidosIn;
    }

    public String getDoc_cod() {
          return this.doc_cod;
    }
    public void setDoc_cod(String doc_codIn) {
          this.doc_cod = doc_codIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int doc_idIn,
          String doc_nombreIn,
          String doc_passwordIn,
          Timestamp timestampIn,
          String doc_apellidosIn,
          String doc_codIn) {
          this.doc_id = doc_idIn;
          this.doc_nombre = doc_nombreIn;
          this.doc_password = doc_passwordIn;
          this.timestamp = timestampIn;
          this.doc_apellidos = doc_apellidosIn;
          this.doc_cod = doc_codIn;
    }


    /** 
     * hasEqualMapping-method will compare two Profesor instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Profesor valueObject) {

          if (valueObject.getDoc_id() != this.doc_id) {
                    return(false);
          }
          if (this.doc_nombre == null) {
                    if (valueObject.getDoc_nombre() != null)
                           return(false);
          } else if (!this.doc_nombre.equals(valueObject.getDoc_nombre())) {
                    return(false);
          }
          if (this.doc_password == null) {
                    if (valueObject.getDoc_password() != null)
                           return(false);
          } else if (!this.doc_password.equals(valueObject.getDoc_password())) {
                    return(false);
          }
          if (this.timestamp == null) {
                    if (valueObject.getTimestamp() != null)
                           return(false);
          } else if (!this.timestamp.equals(valueObject.getTimestamp())) {
                    return(false);
          }
          if (this.doc_apellidos == null) {
                    if (valueObject.getDoc_apellidos() != null)
                           return(false);
          } else if (!this.doc_apellidos.equals(valueObject.getDoc_apellidos())) {
                    return(false);
          }
          if (this.doc_cod == null) {
                    if (valueObject.getDoc_cod() != null)
                           return(false);
          } else if (!this.doc_cod.equals(valueObject.getDoc_cod())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Profesor, mapping to table docentes\n");
        out.append("Persistent attributes: \n"); 
        out.append("doc_id = " + this.doc_id + "\n"); 
        out.append("doc_nombre = " + this.doc_nombre + "\n"); 
        out.append("doc_password = " + this.doc_password + "\n"); 
        out.append("timestamp = " + this.timestamp + "\n"); 
        out.append("doc_apellidos = " + this.doc_apellidos + "\n"); 
        out.append("doc_cod = " + this.doc_cod + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Profesor cloned = new Profesor();

        cloned.setDoc_id(this.doc_id); 
        if (this.doc_nombre != null)
             cloned.setDoc_nombre(new String(this.doc_nombre)); 
        if (this.doc_password != null)
             cloned.setDoc_password(new String(this.doc_password)); 
        if (this.timestamp != null)
             cloned.setTimestamp((Timestamp)this.timestamp.clone()); 
        if (this.doc_apellidos != null)
             cloned.setDoc_apellidos(new String(this.doc_apellidos)); 
        if (this.doc_cod != null)
             cloned.setDoc_cod(new String(this.doc_cod)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
